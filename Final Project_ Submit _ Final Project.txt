.ORIG x3000
        ; Define constants
        NEWLINE .FILL x000A
        SPACE   .FILL x0020
        BACKSPACE .FILL x0008
        LF      .FILL x000A ; Line feed
        CR      .FILL x000D ; Carriage return
        PROMPT  .STRINGZ "Enter an LC-3 assembly instruction (e.g., ADD): "
        RESULT  .STRINGZ "Opcode: "
        ERROR_MSG .STRINGZ "Error: Invalid instruction. Please try again. "
        ADD_STR .STRINGZ "ADD"
        AND_STR .STRINGZ "AND"
        BR_STR  .STRINGZ "BR"
        QUIT_STR .STRINGZ "QUIT"
        
        ; Define states
        START   .FILL 0
        A_STATE .FILL 1
        AN_STATE .FILL 2
        AND_STATE .FILL 3
        BR_STATE .FILL 4
        
        ; Initialize variables
        INPUT   .BLKW 10   ; Space to store user input
        INDEX   .FILL #0   ; Index to keep track of user input length
        STATE   .FILL START   ; Initial state
        
        ; Display prompt message
        LEA R0, PROMPT
        PUTS
        
        ; Main loop
LOOP    GETC                    ; Get user input character
        OUT                     ; Echo the character
        ADD R1, R0, #0          ; Copy input character
        ADD R2, R1, #-32        ; Convert lowercase to uppercase
        BRnp PROCESS_INPUT      ; If not lowercase, continue
        ADD R1, R1, #32         ; Convert uppercase to lowercase
PROCESS_INPUT
        STR R1, INPUT, R5       ; Store input character
        LDR R3, STATE, #0       ; Load current state
        ADD R4, R3, #1          ; Load next state
        ADD R5, R5, #1          ; Increment index
        BRnzp R3                ; Branch to current state
        
; State transitions
START   BRnzp A_STATE
        
A_STATE LDR R3, INPUT, R5     ; Load input character
        LDR R4, ADD_STR, R5    ; Load ADD character
        ADD R6, R3, #-32       ; Convert lowercase to uppercase
        ADD R7, R4, #-32       ; Convert lowercase to uppercase
        BRz A_STATE_CHECK      ; If input is uppercase, check match
        ADD R6, R3, #32        ; Convert uppercase to lowercase
        ADD R7, R4, #32        ; Convert uppercase to lowercase
A_STATE_CHECK
        ADD R5, R5, #1          ; Increment index
        BRz INVALID_INPUT      ; If end of string, error
        ADD R8, R3, R7         ; Compare input with ADD
        BRz VALID_INPUT        ; If match, branch to valid input
        ADD R8, R3, R6         ; Compare input with ADD
        BRz VALID_INPUT        ; If match, branch to valid input
        BR A_STATE              ; Otherwise, stay in A_STATE
        
AN_STATE LDR R3, INPUT, R5     ; Load input character
        LDR R4, AND_STR, R5    ; Load AND character
        ADD R6, R3, #-32       ; Convert lowercase to uppercase
        ADD R7, R4, #-32       ; Convert lowercase to uppercase
        BRz AN_STATE_CHECK     ; If input is uppercase, check match
        ADD R6, R3, #32        ; Convert uppercase to lowercase
        ADD R7, R4, #32        ; Convert uppercase to lowercase
AN_STATE_CHECK
        ADD R5, R5, #1          ; Increment index
        BRz INVALID_INPUT      ; If end of string, error
        ADD R8, R3, R7         ; Compare input with AND
        BRz VALID_INPUT        ; If match, branch to valid input
        ADD R8, R3, R6         ; Compare input with AND
        BRz VALID_INPUT        ; If match, branch to valid input
        BR AN_STATE            ; Otherwise, stay in AN_STATE
        
AND_STATE LDR R3, INPUT, R5     ; Load input character
        LDR R4, AND_STR, R5    ; Load AND character
        ADD R6, R3, #-32       ; Convert lowercase to uppercase
        ADD R7, R4, #-32       ; Convert lowercase to uppercase
        BRz AND_STATE_CHECK    ; If input is uppercase, check match
        ADD R6, R3, #32        ; Convert uppercase to lowercase
        ADD R7, R4, #32        ; Convert uppercase to lowercase
AND_STATE_CHECK
        ADD R5, R5, #1          ; Increment index
        BRz INVALID_INPUT      ; If end of string, error
        ADD R8, R3, R7         ; Compare input with AND
        BRz VALID_INPUT        ; If match, branch to valid input
        ADD R8, R3, R6         ; Compare input with AND
        BRz VALID_INPUT        ; If match, branch to valid input
        BR AND_STATE           ; Otherwise, stay in AND_STATE


BR_STATE LDR R3, INPUT, R5     ; Load input character
        LDR R4, BR_STR, R5     ; Load BR character
        ADD R6, R3, #-32       ; Convert lowercase to uppercase
        ADD R7, R4, #-32       ; Convert lowercase to uppercase
        BRz BR_STATE_CHECK     ; If input is uppercase, check match
        ADD R6, R3, #32        ; Convert uppercase to lowercase
        ADD R7, R4, #32        ; Convert uppercase to lowercase
BR_STATE_CHECK
        ADD R5, R5, #1          ; Increment index
        BRz INVALID_INPUT      ; If end of string, error
        ADD R8, R3, R7         ; Compare input with BR
        BRz VALID_INPUT        ; If match, branch to valid input
        ADD R8, R3, R6         ; Compare input with BR
        BRz VALID_INPUT        ; If match, branch to valid input
        BR BR_STATE            ; Otherwise, stay in BR_STATE
        
; Output opcode for valid input
VALID_INPUT
        LEA R0, RESULT          ; Load address of result message into R0
        PUTS                    ; Display result message
        ADD R0, R0, #0          ; Clear R0 for storing opcode
        ADD R3, R3, #-48        ; Convert ASCII character to integer
        ADD R0, R0, R3          ; Store opcode in R0
        PUTc                    ; Output opcode
        BR LOOP                 ; Branch back to start


; Output error message for invalid input
INVALID_INPUT
        LEA R0, ERROR_MSG       ; Load address of error message into R0
        PUTS                    ; Display error message
        BR LOOP                 ; Branch back to start


        .END